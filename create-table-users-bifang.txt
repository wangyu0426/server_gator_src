select w.IMEI, w.OwnerName, w.PhoneNumbers, w.TimeZone, w.CountryCode, w.ChildPowerOff, w.UseDST, w.SocketModeOff, w.Volume, w.Lang, w.Fence1,w.Fence2, w.Fence3,w.Fence4,w.Fence5,w.Fence6,w.Fence7,w.Fence8,w.Fence9,w.Fence10, w.WatchAlarm0, w.WatchAlarm1, w.WatchAlarm2,w.WatchAlarm3, w.WatchAlarm4,w.HideSelf,w.HideTimer0,w.HideTimer1,w.HideTimer2,w.HideTimer3, pm.model, c.name from watchinfo w join device d on w.recid=d.recid join productmodel pm  on d.modelid=pm.recid join companies c on d.companyid=c.recid where w.imei like '%571398%';

alter table vehiclesinus

CREATE TABLE gator3_device_location
(
    imei bigint NOT NULL,
    location_time  bigint NOT NULL,
    lat real not null,  
    lng real not null, 
    data jsonb
);

CREATE INDEX idx_gator3_location_imei ON gator3_device_location(imei);
CREATE INDEX idx_gator3_location_time ON gator3_device_location(location_time);
CREATE INDEX idx_jsonb_gator3_location_data  ON gator3_device_location USING gin (data jsonb_path_ops);

CREATE INDEX idx_lat_lng  ON device_location USING gist(ll_to_earth(lat, lng)); 


CREATE TABLE device_location
(
    imei bigint NOT NULL,
    location_time  bigint NOT NULL,
    lat real not null,  
    lng real not null, 
    data jsonb
);

CREATE INDEX idx_location_imei ON device_location(imei);
CREATE INDEX idx_location_time ON device_location(location_time) ;
CREATE INDEX idx_lat_lng  ON device_location USING gist(ll_to_earth(lat, lng));  


create  table device_location_2017_05(
  check(location_time>=20170501000000 and location_time<=20170531235959)
)inherits(device_location);
CREATE INDEX idx_location_2017_05_imei ON device_location_2017_05(imei);
CREATE INDEX idx_location_2017_05_time ON device_location_2017_05(location_time) ;
CREATE INDEX idx_2017_05_lat_lng  ON device_location_2017_05 USING gist(ll_to_earth(lat, lng));  

create  table device_location_2017_06(
  check(location_time>=20170601000000 and location_time<=20170630235959)
)inherits(device_location);
CREATE INDEX idx_location_2017_06_imei ON device_location_2017_06(imei);
CREATE INDEX idx_location_2017_06_time ON device_location_2017_06(location_time) ;
CREATE INDEX idx_2017_06_lat_lng  ON device_location_2017_06 USING gist(ll_to_earth(lat, lng));  

create  table device_location_2017_07(
  check(location_time>=20170701000000 and location_time<=20170731235959)
)inherits(device_location);
CREATE INDEX idx_location_2017_07_imei ON device_location_2017_07(imei);
CREATE INDEX idx_location_2017_07_time ON device_location_2017_07(location_time) ;
CREATE INDEX idx_2017_07_lat_lng  ON device_location_2017_07 USING gist(ll_to_earth(lat, lng));  

create  table device_location_2017_08(
  check(location_time>=20170801000000 and location_time<=20170831235959)
)inherits(device_location);
CREATE INDEX idx_location_2017_08_imei ON device_location_2017_08(imei);
CREATE INDEX idx_location_2017_08_time ON device_location_2017_08(location_time) ;
CREATE INDEX idx_2017_08_lat_lng  ON device_location_2017_08 USING gist(ll_to_earth(lat, lng));  

create  table device_location_2017_09(
  check(location_time>=20170901000000 and location_time<=20170930235959)
)inherits(device_location);
CREATE INDEX idx_location_2017_09_imei ON device_location_2017_09(imei);
CREATE INDEX idx_location_2017_09_time ON device_location_2017_09(location_time) ;
CREATE INDEX idx_2017_09_lat_lng  ON device_location_2017_09 USING gist(ll_to_earth(lat, lng));  

create  table device_location_2017_10(
  check(location_time>=20171001000000 and location_time<=20171031235959)
)inherits(device_location);
CREATE INDEX idx_location_2017_10_imei ON device_location_2017_10(imei);
CREATE INDEX idx_location_2017_10_time ON device_location_2017_10(location_time) ;
CREATE INDEX idx_2017_10_lat_lng  ON device_location_2017_10 USING gist(ll_to_earth(lat, lng));  

create  table device_location_2017_11(
  check(location_time>=20171101000000 and location_time<=20171130235959)
)inherits(device_location);
CREATE INDEX idx_location_2017_11_imei ON device_location_2017_11(imei);
CREATE INDEX idx_location_2017_11_time ON device_location_2017_11(location_time) ;
CREATE INDEX idx_2017_11_lat_lng  ON device_location_2017_11 USING gist(ll_to_earth(lat, lng));  

create  table device_location_2017_12(
  check(location_time>=20171201000000 and location_time<=20171231235959)
)inherits(device_location);
CREATE INDEX idx_location_2017_12_imei ON device_location_2017_12(imei);
CREATE INDEX idx_location_2017_12_time ON device_location_2017_12(location_time) ;
CREATE INDEX idx_2017_12_lat_lng  ON device_location_2017_12 USING gist(ll_to_earth(lat, lng));  

create  table device_location_2018_01(
  check(location_time>=20180101000000 and location_time<=20180131235959)
)inherits(device_location);
CREATE INDEX idx_location_2018_01_imei ON device_location_2018_01(imei);
CREATE INDEX idx_location_2018_01_time ON device_location_2018_01(location_time) ;
CREATE INDEX idx_2018_01_lat_lng  ON device_location_2018_01 USING gist(ll_to_earth(lat, lng));  

create  table device_location_2018_02(
  check(location_time>=20180201000000 and location_time<=20180228235959)
)inherits(device_location);
CREATE INDEX idx_location_2018_02_imei ON device_location_2018_02(imei);
CREATE INDEX idx_location_2018_02_time ON device_location_2018_02(location_time) ;
CREATE INDEX idx_2018_02_lat_lng  ON device_location_2018_02 USING gist(ll_to_earth(lat, lng));  

create  table device_location_2018_03(
  check(location_time>=20180301000000 and location_time<=20180331235959)
)inherits(device_location);
CREATE INDEX idx_location_2018_03_imei ON device_location_2018_03(imei);
CREATE INDEX idx_location_2018_03_time ON device_location_2018_03(location_time) ;
CREATE INDEX idx_2018_03_lat_lng  ON device_location_2018_03 USING gist(ll_to_earth(lat, lng));  

create  table device_location_2018_04(
  check(location_time>=20180401000000 and location_time<=20180430235959)
)inherits(device_location);
CREATE INDEX idx_location_2018_04_imei ON device_location_2018_04(imei);
CREATE INDEX idx_location_2018_04_time ON device_location_2018_04(location_time) ;
CREATE INDEX idx_2018_04_lat_lng  ON device_location_2018_04 USING gist(ll_to_earth(lat, lng));  

create  table device_location_2018_05(
  check(location_time>=20180501000000 and location_time<=20180531235959)
)inherits(device_location);
CREATE INDEX idx_location_2018_05_imei ON device_location_2018_05(imei);
CREATE INDEX idx_location_2018_05_time ON device_location_2018_05(location_time) ;
CREATE INDEX idx_2018_05_lat_lng  ON device_location_2018_05 USING gist(ll_to_earth(lat, lng));  

create  table device_location_2018_06(
  check(location_time>=20180601000000 and location_time<=20180630235959)
)inherits(device_location);
CREATE INDEX idx_location_2018_06_imei ON device_location_2018_06(imei);
CREATE INDEX idx_location_2018_06_time ON device_location_2018_06(location_time) ;
CREATE INDEX idx_2018_06_lat_lng  ON device_location_2018_06 USING gist(ll_to_earth(lat, lng));  

create  table device_location_2018_07(
  check(location_time>=20180701000000 and location_time<=20180731235959)
)inherits(device_location);
CREATE INDEX idx_location_2018_07_imei ON device_location_2018_07(imei);
CREATE INDEX idx_location_2018_07_time ON device_location_2018_07(location_time) ;
CREATE INDEX idx_2018_07_lat_lng  ON device_location_2018_07 USING gist(ll_to_earth(lat, lng));  

create  table device_location_2018_08(
  check(location_time>=20180801000000 and location_time<=20180831235959)
)inherits(device_location);
CREATE INDEX idx_location_2018_08_imei ON device_location_2018_08(imei);
CREATE INDEX idx_location_2018_08_time ON device_location_2018_08(location_time) ;
CREATE INDEX idx_2018_08_lat_lng  ON device_location_2018_08 USING gist(ll_to_earth(lat, lng));  

create  table device_location_2018_09(
  check(location_time>=20180901000000 and location_time<=20180931235959)
)inherits(device_location);
CREATE INDEX idx_location_2018_09_imei ON device_location_2018_09(imei);
CREATE INDEX idx_location_2018_09_time ON device_location_2018_09(location_time) ;
CREATE INDEX idx_2018_09_lat_lng  ON device_location_2018_09 USING gist(ll_to_earth(lat, lng));  

create  table device_location_2018_10(
  check(location_time>=20181001000000 and location_time<=20181031235959)
)inherits(device_location);
CREATE INDEX idx_location_2018_10_imei ON device_location_2018_10(imei);
CREATE INDEX idx_location_2018_10_time ON device_location_2018_10(location_time) ;
CREATE INDEX idx_2018_10_lat_lng  ON device_location_2018_10 USING gist(ll_to_earth(lat, lng)); 

create  table device_location_2018_11(
  check(location_time>=20181101000000 and location_time<=20181131235959)
)inherits(device_location);
CREATE INDEX idx_location_2018_11_imei ON device_location_2018_11(imei);
CREATE INDEX idx_location_2018_11_time ON device_location_2018_11(location_time) ;
CREATE INDEX idx_2018_11_lat_lng  ON device_location_2018_11 USING gist(ll_to_earth(lat, lng));  

create  table device_location_2018_12(
  check(location_time>=20181201000000 and location_time<=20181231235959)
)inherits(device_location);
CREATE INDEX idx_location_2018_12_imei ON device_location_2018_12(imei);
CREATE INDEX idx_location_2018_12_time ON device_location_2018_12(location_time) ;
CREATE INDEX idx_2018_12_lat_lng  ON device_location_2018_12 USING gist(ll_to_earth(lat, lng)); 

create table users 
(
  _id serial primary key not null,
  data jsonb
);

create table devices 
(
  _id serial primary key not null,
  data jsonb
);

create table companies 
(
  _id serial primary key not null,
  data jsonb
);

///////////////////////////////////////////////////////////////////////////////////////////////


CREATE DATABASE bifang;

create table users 
(
	_id serial primary key not null,
	data jsonb
);

create table moods 
(
	_id serial primary key not null,
	user_id int not null,
	lat real not null,  
  	lng real not null,  
	data jsonb
);

CREATE INDEX idx_jsonb_user_info  ON users USING gin (data jsonb_path_ops);
create unique index idx_username on users using btree ( jsonb_extract_path_text(data, 'name'));


CREATE INDEX idx_jsonb_mood  ON moods USING gin (data jsonb_path_ops);
CREATE INDEX idx_lat_lng  on moods USING gist(ll_to_earth(lat, lng));  


/*插入记录*/  
INSERT INTO moods(user_id, lat, lng, data) VALUES(1, 40.043945, 116.413668, '{"mood_score": 3, "descr": "not bad"}'::jsonb);  
INSERT INTO moods(user_id, lat, lng, data) VALUES(1, 40.067183, 116.415230, '{"mood_score": 1, "descr": "feel sad"}'::jsonb);  

SELECT * FROM moods where earth_box(ll_to_earth(40.059286,116.418773),1000) @> ll_to_earth(moods.lat, moods.lng);
SELECT moods._id, earth_distance(ll_to_earth(moods.lat, moods.lng), ll_to_earth(40.059286,116.418773))   
AS dis FROM moods   
ORDER BY dis ASC; 

insert into users (data) values('{"name": "admin", "type": 0, "password": "admin"}'::jsonb);

insert into users (data) values('{"name": "abc", "type": 1, "password": "123"}'::jsonb);

update users set data = jsonb_set(data,'{password}','"a6b1908f3ae02557b073f4981d3f23ab5af5288577c83fd543f47ba4d0807708be0ee8e418c313a9d08cdcdb8340f22e0317408fb1857ebe04875e2ec1b48226"'::jsonb,true) where _id = 1;

update users set data = jsonb_set(data,'{password}','"add41783cf77888109ffa53cefcff16c436bdccce7afc2c9bc7a04c15bf598b4a9113f297e4321c0603dfdcf2c6349bbd38b5ed6c5ecc8ae85cd60939f34b6be"'::jsonb,true) where _id = 2;


＃生成私钥key文件

cert.crt  csr.pem key.pem

＃通过私钥文件生成CSR证书签名

openssl genrsa 1024 > key.pem
openssl req -new -key key.pem -out csr.pem
openssl x509 -req -days 365 -in csr.pem -signkey key.pem -out cert.crt

＃通过私钥文件和CSR证书签名生成证书文件
openssl x509 -req -days 365 -in csr.pem -signkey key.pem -out cert.crt

字符串	Bifang-tech!##@2017
16位 小写	12e4f29929b3a3b4
16位 大写	12E4F29929B3A3B4
32位 小写	cc302a0112e4f29929b3a3b4e62a1b9f
32位 大写	CC302A0112E4F29929B3A3B4E62A1B9F

grep 61664333 -r ./ | awk '{print $1}' | awk -F ':' '{print $1}'
56


alter table watchinfo add COLUMN ContactAvatar VARCHAR(2560) NOT NULL;

/////////////==================================/////////////==================================
/**
 * Created by Layman(http://github.com/anysome) on 16/11/24.
 */
import React from 'react';
import {RefreshControl, InteractionManager, View, Text, Alert} from 'react-native';

import SwipeableListView from 'SwipeableListView';
import SwipeableQuickActions from 'SwipeableQuickActions';
import SwipeableQuickActionButton from 'SwipeableQuickActionButton';
import TouchableBounce from 'TouchableBounce';
import ActionSheet from '@yfuks/react-native-action-sheet';
import {analytics, airloy, styles, colors, api, toast, L, hang} from '../../app';
import util from '../../libs/Util';
import ListSource from '../../logic/ListSource';
import EventTypes from '../../logic/EventTypes';
import EditProject from './EditProject';
import Project from './Project';
import EditTask from './EditTask';

export default class Listing extends React.Component {

  constructor(props) {
    super(props);
    this.listSource = null;
    this.today = props.today;
    this.state = {
      isRefreshing: true,
      dataSource: SwipeableListView.getNewDataSource()
    };
    this.rightButtonIcon = null;
  }

  componentWillMount() {
    let route = this.props.navigator.navigationContext.currentRoute;
    route.onRightButtonPress = () => {
      this.props.navigator.push({
        title: '添加',
        component: EditProject,
        passProps: {
          onUpdated: (rowData) => this.updateRow(rowData)
        }
      });
    };
    util.isAndroid() ? this.props.navigator.replacePrevious(route) : this.props.navigator.replace(route);
  }

  componentDidMount() {
    analytics.onPageStart('page_listing');
    util.isAndroid() ? InteractionManager.runAfterInteractions(() => this.reload()) : this.reload();
  }

  componentWillUnmount() {
    analytics.onPageEnd('page_listing');
  }

  async reload() {
    this.setState({
      isRefreshing: true
    });
    let result = await airloy.net.httpGet(api.project.list.focus);
    if (result.success) {
      this.listSource = new ListSource(result.info);
      this.setState({
        dataSource: this.state.dataSource.cloneWithRowsAndSections({s1:this.listSource.datas}, ['s1'], null),
        isRefreshing: false
      });
    } else {
      result.message !== 'error.request.auth' && this.setState({
        isRefreshing: false
      });
      toast(L(result.message));
    }
  }

  _toEdit(rowData) {
    this.state.dataSource.setOpenRowID(null);
    this.props.navigator.push({
      title: '修改',
      component: EditProject,
      passProps: {
        data: rowData,
        onUpdated: (rowData) => this.updateRow(rowData)
      }
    });
  }

  _moreActions(rowData) {
    let BUTTONS = ['修改', '删除 ?', '取消'];
    ActionSheet.showActionSheetWithOptions({
        options: BUTTONS,
        cancelButtonIndex: 2,
        destructiveButtonIndex: 1,
        tintColor: colors.dark2
      },
      async(buttonIndex) => {
        switch (buttonIndex) {
          case 0:
            this._toEdit(rowData);
            break;
          case 1:
            this._toDelete(rowData);
            break;
          default:
            console.log('cancel options');
        }
      }
    );
  }

  _toDelete(rowData) {
    Alert.alert(
      '确认删除 ?',
      rowData.subTodo > 0 ? '未完成的任务可在回收站里找到.' : '彻底删除了哦!',
      [
        {text: '不了'},
        {
          text: '删除',
          onPress: async () => {
            hang();
            let result = await airloy.net.httpGet(api.project.remove, {id: rowData.id});
            if (result.success) {
              rowData.subTodo && airloy.event.emit(EventTypes.choreChange);
              this.deleteRow(rowData);
            } else {
              toast(L(result.message));
            }
            hang(false);
          }
        }
      ]
    );
  }

  _addTask(rowData) {
    this.props.navigator.push({
      title: '添加子任务',
      component: EditTask,
      passProps: {
        projectId: rowData.id,
        editable: true,
        onUpdated: (task) => {
          rowData.subTodo = rowData.subTodo + 1;
          rowData.subTotal = rowData.subTotal + 1;
          this.listSource.update(util.clone(rowData));
          this.setState({
            dataSource: this.state.dataSource.cloneWithRowsAndSections({s1:this.listSource.datas}, ['s1'], null)
          });
        }
      }
    });
  }

  _pressRow(rowData, sectionId) {
    this.props.navigator.push({
      title: rowData.title,
      component: Project,
      rightButtonIcon: require('../../../resources/icons/create.png'),
      passProps: {
        data: rowData,
        today: this.today,
        onUpdated: (rowData) => this.updateRow(rowData)
      }
    });
  }

  updateRow(rowData) {
    // also for add
    this.listSource.update(rowData);
    this.setState({
      dataSource: this.state.dataSource.cloneWithRowsAndSections({s1:this.listSource.datas}, ['s1'], null)
    });
  }

  deleteRow(rowData) {
    this.listSource.remove(rowData);
    this.setState({
      dataSource: this.state.dataSource.cloneWithRowsAndSections({s1:this.listSource.datas}, ['s1'], null)
    });
  }

  _renderRow(rowData, sectionId, rowId) {
    return (
      <TouchableBounce style={styles.listRow}
                       onPress={() => this._pressRow(rowData, sectionId)}>
        <Text style={styles.title}>{rowData.title}</Text>
        <Text style={styles.hint}>{rowData.subTodo} / {rowData.subTotal}</Text>
      </TouchableBounce>
    );
  }

  _renderSeparator(sectionId, rowId, adjacentRowHighlighted) {
    return <View key={rowId + '_separator'} style={styles.hr}></View>
  }

  _renderActions(rowData, sectionId) {
    return (
      <SwipeableQuickActions style={styles.rowActions}>
        <SwipeableQuickActionButton imageSource={{}} text={"更多"}
                                    onPress={() => this._moreActions(rowData)}
                                    style={styles.rowAction} textStyle={styles.rowText}/>
        <SwipeableQuickActionButton imageSource={{}} text={"+任务"}
                                    onPress={() => this._addTask(rowData)}
                                    style={styles.rowActionConstructive} textStyle={styles.rowText}/>
      </SwipeableQuickActions>
    );
  }

  render() {
    return (
      <SwipeableListView
        maxSwipeDistance={130}
        renderQuickActions={(rowData, sectionId, rowId) => this._renderActions(rowData, sectionId)}
        enableEmptySections={true}
        initialListSize={10}
        pageSize={5}
        dataSource={this.state.dataSource}
        renderRow={(rowData, sectionId, rowId) => this._renderRow(rowData, sectionId, rowId)}
        renderSeparator={this._renderSeparator}
        refreshControl={
                          <RefreshControl
                            refreshing={this.state.isRefreshing}
                            onRefresh={() => this.reload()}
                            tintColor={colors.accent}
                            title={'加载中...'}
                            colors={[colors.accent, colors.action]}
                            progressBackgroundColor={colors.bright1}
                          />}
      />
    );
  }
}

/////////////==================================/////////////==================================

import React, {Component} from 'react'
import {
    View, Text, StyleSheet, Image, Dimensions, Button,
    TextInput, Navigator, Alert, ActivityIndicator,
    TouchableOpacity, ListView,

} from 'react-native'

import SwipeableListView from 'SwipeableListView'
import SwipeableListViewDataSource from 'SwipeableListViewDataSource'
import SwipeableQuickActions from 'SwipeableQuickActions'
import SwipeableQuickActionButton from 'SwipeableQuickActionButton'
import Icon from 'react-native-vector-icons/Ionicons'

import config from '../../config'
import i18n from '../../asserts/langs'
import ajax from '../../common/ajax'
import NavBar from '../navbar'

var {height, width} = Dimensions.get('window')

export default class TodayMoodsComponent extends Component {
    constructor(props){
        super(props)
        var ds_0 = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2})
        var ds = new SwipeableListViewDataSource({
            getRowData: (dataBlob, sectionId, rowId) => dataBlob[sectionId][(rowId)],
            rowHasChanged: (row1, row2) => row1 !== row2,
            sectionHeaderHasChanged: (s1, s2) => s1 !== s2
        })

        this.state = {
            dataSource: ds.cloneWithRowsAndSections({s1: ds_0.cloneWithRows([
                {
                    id: 0, moodTitle: 'Mood1, Happy!', moodTime: '22:35',
                    moodSummary: 'This is a sunny day today!', moodFlag: true
                },
                {
                    id: 1, moodTitle: 'Mood2, Happy!', moodTime: '21:30',
                    moodSummary: 'This is a sunny day today!', moodFlag: false
                },
                {
                    id: 2, moodTitle: 'Mood3, Happy!', moodTime: '20:25',
                    moodSummary: 'This is a sunny day today!', moodFlag: true
                },
                {
                    id: 3, moodTitle: 'Mood4, Happy!', moodTime: '19:10',
                    moodSummary: 'This is a sunny day today!', moodFlag: false
                },
                {
                    id: 4, moodTitle: 'Mood5, Happy!', moodTime: '18:05',
                    moodSummary: 'This is a sunny day today!', moodFlag: true
                },
                {
                    id: 5, moodTitle: 'Mood6, Happy!', moodTime: '17:50',
                    moodSummary: 'This is a sunny day today!', moodFlag: true
                },
            ])}, ['s1','s1','s1','s1','s1','s1'], ['0', '1', '2', '3', '4', '5']),

            isInProgressing: false,
        }
    }

    render(){
        return (
            <View style={styles.container}>
                <NavBar route={this.props.route} navigator={this.props.navigator}/>
                <View style={styles.content}>
                    <TouchableOpacity
                        activeOpacity={1}
                        style={styles.searchBar}>
                        <View style={styles.searchbarCenter}>
                            <Icon name={'ios-search'} size={16}  style={{color: '#999999'}}>
                                {'  ' + i18n('search')}
                            </Icon>
                        </View>
                        <Icon name={'ios-mic'} size={20}  style={{width: 16, color: '#999999',
                        }} />
                    </TouchableOpacity>
                    <View style={styles.listView}>
                        {
                            true ?
                                <SwipeableListView
                                    dataSource={this.state.dataSource}
                                    renderRow={this._renderRow.bind(this)}
                                    maxSwipeDistance={120}
                                    renderQuickActions={
                                        (rowData, sectionId, rowId) => this._renderActions(rowData, sectionId)
                                    }
                                    enableEmptySections={true}
                                    initialListSize={10}
                                    pageSize={10}/>

                                :
                                <ListView dataSource={this.state.dataSource}
                                          renderRow={this._renderRow.bind(this)}/>
                        }
                    </View>
                </View>
            </View>
        )
    }

    _renderRow(rowData){
        return (
            <View style={styles.rowContainer}>
                <Image style={[styles.moodImage, {backgroundColor: moodImgColors[rowData.id]}]}/>
                <View style={styles.moodItemContent}>
                    <View style={styles.moodTitleAndTime}>
                        <Text style={styles.moodTitle}>
                            {rowData.moodTitle}
                        </Text>
                        <Text style={styles.moodTime}>
                            {rowData.moodTime}
                        </Text>
                    </View>

                    <View style={styles.moodSummaryAndFlag}>
                        <Text style={styles.moodSummary}>{rowData.moodSummary}</Text>
                        <Icon style={styles.moodFlag} size={18}
                              color={'#3ac17e'}
                              name={ rowData.moodFlag ? 'ios-checkmark-circle' : 'ios-checkmark-circle-outline'}></Icon>
                    </View>
                </View>
            </View>
        )
    }

    _renderActions(rowData, sectionId) {
        return (
            <SwipeableQuickActions style={styles.rowActions}>
                { sectionId !== 2 &&
                <SwipeableQuickActionButton imageSource={{}} text={"更多"}
                                            onPress={() => this._moreActions(rowData, sectionId)}
                                            style={styles.rowAction} textStyle={styles.rowText}/>
                }
                <SwipeableQuickActionButton imageSource={{}} text={"删除"}
                                            onPress={() => this._delete(rowData)}
                                            style={styles.rowActionDestructive} textStyle={styles.rowText}/>
            </SwipeableQuickActions>
        );
    }
}

const moodImgColors = ['#fd6461', '#f7a650', '#f4cd56', '#71ca58', '#51baf2', '#d08ce0']

const styles = StyleSheet.create({
    container:{
        flex: 1,
        backgroundColor: '#fff',
    },
    content:{
        flex: 1,
        backgroundColor: '#ebedee'

    },
    searchBar: {
        height: 30,
        borderRadius: 4,
        marginLeft: 10,
        marginTop: 10,
        marginRight: 10,
        marginBottom: 10,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#fff',
    },
    searchbarCenter: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        marginLeft: 8,
    },
    rowContainer: {
        height: 64,
        backgroundColor: '#fff',
        borderBottomWidth: 1,
        borderBottomColor: '#efefef',
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#fff',
    },
    moodImage: {
        marginLeft: 10,
        width: 48,
        height: 48,
        borderRadius: 24,
    },
    moodItemContent: {
        flex: 1,
        marginLeft: 16,
        justifyContent: 'center',
        alignItems: 'center',
    },
    moodTitleAndTime: {
        flex: 1,
        flexDirection: 'row',
        width: width - 64 - 26,
        justifyContent: 'space-between',
        alignItems: 'center',
    },
    moodSummaryAndFlag: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        width: width - 64 - 26,
    },
    moodTitle: {
        fontSize: 16,
    },
    moodTime: {
        fontSize: 12,
        color: '#aaaaaa',
    },
    moodSummary: {
        fontSize: 14,
        color: '#aaaaaa',
    }

})

strSQL := fmt.Sprintf("update %s set location_time=%d,data=jsonb_set(data,'{datatime}','%d'::jsonb,'{steps}','%d'::jsonb,'{locateType}','%d'::jsonb,true) ",


update device_location_2017_05 set location_time=20170525153000,data=jsonb_set(data,'{datatime}','170525153000'::jsonb,true) where imei=357593060571398 and location_time=20170525153000; update device_location_2017_05 set location_time=20170525153000,data=jsonb_set(data,'{steps}','0'::jsonb,true) where imei=357593060571398 and location_time=20170525153000; update device_location_2017_05 set location_time=20170525153000,data=jsonb_set(data,'{locateType}','3'::jsonb,true) where imei=357593060571398 and location_time=20170525153000;

data = jsonb_set(data,'{datatime, steps, }','%d'::jsonb,'{steps}','%d'::jsonb,'{locateType}','%d'::jsonb,true) 